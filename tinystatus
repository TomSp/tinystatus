#!/usr/bin/env sh

title=tinystatus
timeout=10 
basedir=`pwd`
tmp="${basedir}/t_tmp"
checkfile="${1:-checks.csv}"
incidentsfile="${2:-incidents.txt}"
failonoutage=false
useragent="User-Agent: Mozilla/5.0 (X11; Linux x86_64; Debian) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"



if [ -e ${basedir}/${title}.run ] ; then
	PID=$(cat ${basedir}/${title}.run)
	kill -0 $PID
	statuscode=$?
	if [ "${statuscode}" -eq 0 ] ; then
		exit 1
	else
		rm ${basedir}/${title}.run
	fi
fi

echo -n "$$" > ${basedir}/${title}.run

command_exists(){
    if ! command -v "${1}" >/dev/null 2>&1; then
        echo >&2 "Error: ${1} missing. Please install it"
        rm ${basedir}/${title}.run
        exit 1
    fi
}

get_element(){
    echo "${2}" | awk -v col="${1}" -F',' '{gsub(/^[ \t]+|[ \t]+$/, "", $col); print $col}'
}

check(){
    ctype="${1}"
    host="${2}"
    name="${3}"
    expectedcode="${4}"

    IPv="$(echo "${ctype}" | grep -o '[46]$')"
    case "${ctype}" in
        http*)
			echo "${host}" > "${tmp}/ko/${name}.error"
            statuscode="$(curl -${IPv}sSkLo /dev/null -H "${useragent}" -m "${timeout}" -w "%{http_code}" "${host}" 2>> "${tmp}/ko/${name}.error")" 
            if [ "${statuscode}" -eq "${expectedcode}" ] ; then
				if [ -s "${tmp}/ko/${name}.error" ]; then
						rm "${tmp}/ko/${name}.error"
				fi
			fi
			;;
        ping*)
            ping -${IPv}W "${timeout}" -c 1 "${host}" >/dev/null 2>&1
            statuscode=$?
            [ "${statuscode}" -ne "${expectedcode}" ] && echo "Ping ${host} unreachable" > "${tmp}/ko/${name}.error";;
        port*)
            error="$(nc -${IPv}w "${timeout}" -zv ${host} 2>&1)"
            statuscode=$?
            [ "${statuscode}" -ne "${expectedcode}" ] && echo "Port ${host} ${error}" > "${tmp}/ko/${name}.error";;
        iperf*)
           resultfile="${tmp}/$(echo ${name} | sed 's# #_#g').result"
           reverse="$(echo "${ctype}" | grep -o '[R]$')";
           
           if test "${reverse}" = "R" ; then
				reverse=" -R"
           fi
			echo "$(date) ${reverse} ${host}" > ${resultfile}
			for i in 1 2 3 4 5; 
			do
				iperf3 -4 -c "$(echo ${host}| cut -d: -f1)" -p $(echo ${host}| cut -d: -f2) -t 5 ${reverse} 2>&1 | tail -n5 | head -n3 >> ${resultfile}
				statuscode=$?
				if [ "${statuscode}" -eq "${expectedcode}" ] && [ $(cat "${resultfile}" | tail -n 1| grep 'iperf3: error' | wc -l) -eq 0 ] ; then
					if [ -s "${tmp}/ko/${name}.error" ] ; then
						rm "${tmp}/ko/${name}.error"
					fi
					break;
				fi
				echo "Error '${name}'" > "${tmp}/ko/${name}.error"
				cat ${resultfile} >> "${tmp}/ko/${name}.error"
				sleep 20
			done
			;;
   esac

    # verity status and write files
    if [ "${statuscode}" -eq "${expectedcode}" ]; then
        echo "Status code: ${statuscode}" > "${tmp}/ok/${name}.status"
    else
        echo "Status code: ${statuscode}" > "${tmp}/ko/${name}.status"
    fi
    if [ "${resultfile}" != "" ] && [ -s "${tmp}/ko/${name}.error" ]; then
        sed "${tmp}/ko/${name}.error" \
          -e 's,curl: ([0-9]*) ,,' \
          -e 's,.*) failed: ,,' > "${tmp}/ko/${name}.status"
        if [ -s "${incidentsfile}.new" ] ; then
			echo "" >> "${incidentsfile}.new" 
        else
			echo -n "$(date)    " > "${incidentsfile}.new" 
		fi
        cat "${tmp}/ko/${name}.error"  >> "${incidentsfile}.new"
        
    fi
}

command_exists 'curl'
command_exists 'nc'
command_exists 'ping'
command_exists 'iperf3'

mkdir -p "${tmp}/ok" "${tmp}/ko" || exit 1

while IFS="$(printf '\n')" read -r line; do
    ctype="$(get_element 1 "${line}")"
    if [[ ${ctype:0:1} != "#" ]] ; then
		code="$(get_element 2 "${line}")"
		name="$(get_element 3 "${line}")"
		host="$(get_element 4 "${line}")"
		check "${ctype}" "${host}" "${name}" "${code}" 
	fi
    #&
done < "${checkfile}"
wait

if [ -s "${incidentsfile}.new" ] ; then
	echo "###############" >> "${incidentsfile}.new"
    cat "${incidentsfile}" >> "${incidentsfile}.new"
    mv "${incidentsfile}.new" "${incidentsfile}"
fi

cat << EOF
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"><title>${title}</title><style>
body { font-family: segoe ui,Roboto,Oxygen-Sans,Ubuntu,Cantarell,helvetica neue,Verdana,sans-serif; }
h1 { margin-top: 30px; }
ul { padding: 0px; }
li { list-style: none; margin-bottom: 2px; padding: 5px; border-bottom: 1px solid #ddd;  }
.container { max-width: 600px; width: 100%; margin: 15px auto; }
.panel { text-align: center; padding: 10px; border: 0px; border-radius: 5px; }
.failed-bg  { color: white; background-color: #E25D6A; }
.success-bg { color: white; background-color: #52B86A; }
.failed  { color: #E25D6A; }
.success { color: #52B86A; }
.small { font-size: 80%; }
.status { float: right; }
</style></head>
<body>
<script type="text/javascript">
        function checklength(i) {
            'use strict';
            if (i < 10) {
                i = "0" + i;
            }
            return i;
        }

        var minutes, seconds, count, counter, timer;
        count = 120; //seconds
        counter = setInterval(timer, 1000);

        function timer() {
            'use strict';
            count = count - 1;
            minutes = checklength(Math.floor(count / 60));
            seconds = checklength(count - minutes * 60);
            if (count < 0) {
                clearInterval(counter);
                return;
            }
            document.getElementById("timer").innerHTML = 'Next refresh in ' + minutes + ':' + seconds + ' ';
            if (count === 0) {
                location.reload();
            }
        }
</script>
<div class='container'>
<h1>Global status</h1>
<span id="timer">&nbsp;</span>
EOF
#outagenb="$(find "${tmp}/ko" -mindepth 1 | grep -c 'status$')"
outagenb="$(find "${tmp}/ko" | grep -c 'status$')"
if [ "${outagenb}" -ne 0 ]; then
    echo "<ul><li class='panel failed-bg'>${outagenb} Outage(s)</li></ul>"
else
    echo "<ul><li class='panel success-bg'>All Systems Operational</li></ul>"
fi
cat << EOF
<h1>Services</h1>
<ul>
EOF
for file in "${tmp}/ko/"*.status; do
    [ -e "${file}" ] || continue
    name="$(basename "${file}" | sed 's,.status$,,')"
    status="$(cat "${file}")"
    echo "<li>${name} <span class='small failed'>(${status})</span><span class='status failed'>Disrupted</span></li>"
done
for file in "${tmp}/ok/"*.status; do
    [ -e "${file}" ] || continue
    name="$(basename "${file}" | sed 's,.status$,,')"
    echo "<li>${name} <span class='status success'>Operational</span></li>"
done
cat << EOF
</ul>
<p class=small> Last check: $(date -I'seconds')</p>
<h1>Speedtests</h1>
<ul>
EOF
for file in "${tmp}/"*.result ; do
	echo '<li><pre>'
	cat $file 	
	echo '</pre></li>'
done
echo '</ul>'
if [ -f "${incidentsfile}" ]; then
    echo '<h1>Incidents</h1>'
    if [ -s "${incidentsfile}" ]; then
		echo '<ul><li><pre>'
        sed 's+###############+</pre></li><li><pre>+' "${incidentsfile}"
        echo '</pre></li></ul>'
    else
        echo '<p>No incident reported yet ;)</p>'
    fi
fi
cat <<EOF
</div>
</body></html>
EOF

rm -r "${tmp}" 2>/dev/null
rm ${basedir}/${title}.run

if [ "${failonoutage}" = true ]; then
    exit "${outagenb}"
fi

